// -----------------------------------------------------------------------
// <copyright file="marsbootstrap.ts" company="Microsoft">
//      Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------- 
var _MicrosoftMars;
(function (_MicrosoftMars) {
    var Client;
    (function (Client) {
        var Loader;
        (function (Loader) {
            'use strict';
            var devURL;
            devURL = "https://idccrmmarsprimary.marsdaily.trafficmanager.net/Configuration/getLoaderConfiguration";
            Loader.serverUrl = "%%CDNURL%%";
            Loader.webApiBaseUrl = "%%SERVICEURL%%";
            Loader.trafficManagerBaseUrl = "%%TRAFFICMANAGERURL%%";
            Loader.aadClientId = "%%AADCLIENTID%%";
            Loader.aadTenantDomain = "%%AADTENANT%%";
            Loader.integrationsApiUrl = "%%INTEGRATIONSAPIURL%%";
            Loader.resourceUrl = "%%RESOURCEURL%%";
            Loader.loginAuthority = "%%LOGINAUTHORITY%%";
            Loader.allowUnAuthorize = false;
            Loader.deploymentType = "TEST";
            /** Loads configuration data from Configuration controller and subsequently loads MarsLoader.js */
            var MarsBootStrap = (function () {
                /** Creates a MarsBootStrap object. */
                function MarsBootStrap() {
                    _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_BS_START");
                    this.loadConfigurationData();
                }
                /** Gets Configuration data from Configuration controller. Also loads marsloader.js and
                sets the configuration variables */
                MarsBootStrap.prototype.loadConfigurationData = function () {
                    var configurationData, fwlink;
                    // var fwlink = 'http://marsmaindevservice.cloudapp.net';
                    // PROD: https://go.microsoft.com/fwlink/?LinkID=733540&clcid=0x409
                    // INT: https://go.microsoft.com/fwlink/?LinkID=733541&clcid=0x409
                    // TIE: https://go.microsoft.com/fwlink/?LinkID=733542&clcid=0x409
                    var hostVal = window.location.host;
                    window.sessionStorage.setItem('INVALIDATE_CONFIG_CACHE_KEY', 'true');
                    window.sessionStorage.setItem('INVALIDATE_EXCEPTION_CONTROLS_CACHE_KEY', 'true');
                    if (!hostVal)
                        hostVal = window.parent.location.host;
                    // build webapi urls using FWLink depending upon environments for TIE/INT/TIP/PROD
                   if (this.CheckHostEndsWith(hostVal, "crm10.dynamics.com")) {
                       fwlink = "https://marsv2intprimarytm.marsdaily.trafficmanager.net/Configuration/GetLoaderConfiguration";
                        Loader.deploymentType = 'PROD';                                            
                    }
                    else if (this.CheckHostEndsWith(hostVal, "dynamics.com")) {
                        fwlink = "https://marsv2prodprimarytm.marsdaily.trafficmanager.net/Configuration/GetLoaderConfiguration";                         
                        Loader.deploymentType = 'PROD';                                               
                    }
                    else if (this.CheckHostEndsWith(hostVal, "dynamics-int.com")) {
                        fwlink = "https://marsv2intprimarytm.marsdaily.trafficmanager.net/Configuration/GetLoaderConfiguration";
                        Loader.deploymentType = 'INT';
                    }
                    else if (this.CheckHostEndsWith(hostVal, "crmlivetie.com")) {
                        fwlink = "https://marsv2tieprimarytm.marsdaily.trafficmanager.net/Configuration/GetLoaderConfiguration";
                        Loader.deploymentType = 'TIE';
                    }
                    else {
                        //fwlink = devURL;
                        console.warn("CRM did not match a configured environment. Not loading Mars.");
                        return;
                    }
                    var that = this;
                    _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_FETCH_START");
                    this.httpGetAsync(fwlink, function (configurationJSON) {
                        configurationData = JSON.parse(configurationJSON);
                        _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_FETCH_END");
                        console.log('Fetch successful for configuration data from Web API');
                        _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_CONFIG_START");
                        that.loadConfigurations(configurationData);
                        console.log('Load successful for configuration data in variables');
                        _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_MARSLOADER_START");
                        that.loadScript('marsloader.js', function () {
                            _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_MARSLOADER_END");
                            _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_BS_END");
                        });
                        // console.log('Load successful for marsloader.js');
                    }, this.configurationLoadFailureHandler);
                };
                /** checks if string s1 ends with string s2 */
                MarsBootStrap.prototype.CheckHostEndsWith = function (s1, s2) {
                    return (s1.substring(s1.length - s2.length, s1.length) === s2);
                };
                /** send async http request for a resource */
                MarsBootStrap.prototype.httpGetAsync = function (theUrl, successCallback, failureCallback) {
                    var xmlHttp = new XMLHttpRequest();
                    xmlHttp.onreadystatechange = function () {
                        if (xmlHttp.readyState == 4) {
                            if (xmlHttp.status == 200) {
                                successCallback(xmlHttp.responseText);
                            }
                            else {
                                failureCallback(xmlHttp.responseText);
                            }
                        }
                    };
                    xmlHttp.open("GET", theUrl, true); // true for asynchronous
                    xmlHttp.send(null);
                };
                /** Callback function to handle error loading configuration data*/
                MarsBootStrap.prototype.configurationLoadFailureHandler = function (errorinfo) {
                    console.log("Error loading configuration data in marsbootstrap.js " + errorinfo);
                };
                /** Load script function with callback to handle synchronicity
                * @param src - script file path.
                * @param scripts - script tag.
                * @param callback - callback function.
                */
                MarsBootStrap.prototype.loadScript = function (src, callback) {
                    var that;
                    that = this;
                    if (!document.getElementById(Loader.serverUrl + src)) {
                        var script = document.createElement('script');
                        script.onerror = function () {
                            // handling error when loading script
                            console.log('Error in loading script');
                        };
                        script.onload = function () {
                            console.log(src + ' loaded ');
                            if (callback != null && callback != undefined) {
                                callback.call(that);
                            }
                        };
                        script.src = Loader.serverUrl + src;
                        script.id = Loader.serverUrl + src;
                        script.type = "text/javascript";
                        document.getElementsByTagName('head')[0].appendChild(script);
                    }
                    else {
                        console.log(src + ' already loaded ');
                    }
                };
                /** Loads MarsLoader variables with configuration data */
                MarsBootStrap.prototype.loadConfigurations = function (configurationData) {
                    var configData = configurationData.Result;
                    Loader.integrationsApiUrl = configData.integrationsApiUrl;
                    this.clientSelection(configData);
                    Loader.aadClientId = configData.aadClientId;
                    Loader.aadTenantDomain = configData.aadTenantDomain;
                    Loader.resourceUrl = configData.resourceUrl;
                    Loader.loginAuthority = configData.loginAuthority;
                    if (configData.allowUnAuthorize && configData.allowUnAuthorize.toLowerCase() === "true") {
                        Loader.allowUnAuthorize = true;
                    }
                    _MicrosoftMars.Client.Loader.PerfMarker.MarsCaptureModulePerfTime("PERF_M_CONFIG_END");
                };
                MarsBootStrap.prototype.clientSelection = function (configData) {
                    //var CrmXrm = window["Xrm"] ? window["Xrm"] : window.parent["Xrm"];
                    var routePrefix = configData.routePrefix;
                    Loader.serverUrl = configData.serverUrl;
                    var localStorageIsLegacyClient = JSON.parse(localStorage.getItem("isLegacyClient"));
                    if (localStorageIsLegacyClient == null)
                        localStorageIsLegacyClient = false;
                    //Legacy client if turned on if, FCB is ON or ServiceConfiguration is ON or localStore var is ON.
                    if (configData.isLegacyClient.toLowerCase() == "true" || localStorageIsLegacyClient) {
                        routePrefix = "";
                        Loader.serverUrl = configData.legacyServerUrl;
                    }
                    Loader.webApiBaseUrl = configData.primaryTrafficManager + routePrefix;
                    Loader.trafficManagerBaseUrl = configData.primaryTrafficManager + routePrefix;
                };
                return MarsBootStrap;
            })();
            Loader.MarsBootStrap = MarsBootStrap;
            var PerfMarker = (function () {
                function PerfMarker() {
                }
                PerfMarker.MarsCaptureModulePerfTime = function (key) {
                    var perfMetricsObject = {};
                    var perfMetricsObjectString = localStorage.getItem("MARS_PERF_AUTOMATION");
                    if (perfMetricsObjectString != null && perfMetricsObjectString != undefined) {
                        perfMetricsObject = JSON.parse(perfMetricsObjectString);
                    }
                    var val = new Date();
                    perfMetricsObject[key] = val.getTime().toString();
                    //console.log(key + " : " + val.getTime().toString() + ", in  ms : " + perfMetricsObject[key]);
                    localStorage.setItem("MARS_PERF_AUTOMATION", JSON.stringify(perfMetricsObject));
                };
                return PerfMarker;
            })();
            Loader.PerfMarker = PerfMarker;
        })(Loader = Client.Loader || (Client.Loader = {}));
    })(Client = _MicrosoftMars.Client || (_MicrosoftMars.Client = {}));
})(_MicrosoftMars || (_MicrosoftMars = {}));
(function (funcName, baseObj) {
    window.marsbootstrap = new _MicrosoftMars.Client.Loader.MarsBootStrap();
})("docReady", window);
