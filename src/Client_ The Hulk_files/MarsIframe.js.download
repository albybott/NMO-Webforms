// -----------------------------------------------------------------------
// <copyright file="MarsIframe.ts" company="Microsoft">
//      Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
/// <reference path="lib/jquery-2.1.1.js" />
var _MicrosoftMars;
(function (_MicrosoftMars) {
    var Client;
    (function (Client) {
        var Authentication;
        var urlParams;
        (function (Authentication) {
            'use strict';
            var MarsIframe = (function () {
                /*
                 * Constructor for Crossdomain
                 */
                function MarsIframe() {
                    if (MarsIframe._instance) {
                        console.log("Singleton instance already exists for MarsIframe. Access it via MarsIframe.getInstance()");
                    }
                    else {
                        MarsIframe._instance = this;
                        this.requestMap = {};
                        this.eventobjectMap = {};
                        this.authrequestMap = {};
                        this.registerListener();



                        urlParams = getUrlParams();

                        MarsIframe.ClientType = urlParams.clientType;

                        switch (urlParams.env) {
                            case "prod":
                                {
                                    MarsIframe.EnvType = AuthManager.constants.env.prod;
                                    MarsIframe.GraphUrl = "https://graph.windows.net";
                                    break;
                                }
                            case "int":
                            case "tie":
                                {
                                    MarsIframe.EnvType = AuthManager.constants.env.ppe;
                                    MarsIframe.GraphUrl = "https://graph.ppe.windows.net";
                                    break;
                                }
                            default: MarsIframe.EnvType = AuthManager.constants.env.dev; break;
                        }

                        MarsIframe.resourceURL = urlParams.resourceUrl;
                        setAuthConfig(urlParams);

                        if (document.cookie.indexOf("authCompleted=true") > 0) {
                            AuthManager.getInstance(MarsIframe.EnvType, MarsIframe.ClientType)
                                .getTokenForResource(MarsIframe.resourceURL);
                        }
                    }
                }

                function getUrlParams() {
                    var queryString = window.location.search.substr(1);
                    var ret = {}
                    if (!queryString) {
                        return ret;
                    }

                    var params = queryString.split('&');
                    for (var i = 0; i < params.length; i++) {
                        var p = params[i].split('=', 2);
                        if (p.length === 1) {
                            ret[p[0]] = "";
                        } else {
                            ret[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
                        }
                    }

                    return ret;
                }

                function setAuthConfig(urlParams) {
                    AuthManager.configs[MarsIframe.EnvType].clientId = urlParams.clientId;
                    //Let us comment this out for now and use the loginAuthority from auth.js
                    //AuthManager.configs[MarsIframe.EnvType].loginAuthority = urlParams.loginAuthority;
                }

                /*
                 * Get the instance of Crossdomain
                 */
                MarsIframe.getInstance = function () {
                    if (MarsIframe._instance == null) {
                        MarsIframe._instance = new MarsIframe();
                    }
                    return MarsIframe._instance;
                };
                MarsIframe.IsDomainAvailable = function (domainUrl) {
                    var domainName = domainUrl.trim().toLowerCase();
                    if (MarsIframe.domainWhiteList && MarsIframe.domainWhiteList.length > 0) {
                        if ($.inArray("*", MarsIframe.domainWhiteList) != -1)
                            return true;
                        for (var i = 0; i < MarsIframe.domainWhiteList.length; i++) {
                            var currentDomainList = MarsIframe.domainWhiteList[i].trim().toLowerCase();
                            if ((domainName == currentDomainList)) {
                                return true;
                            }
                            else if (currentDomainList.search('[*]') >= 0 && (domainName.search(currentDomainList.replace(/\*/g, "[^ ]*")) >= 0)) {
                                return true;
                            }
                        }
                    }
                    console.log("Request from Invalid domain: " + MarsIframe.eventObject.origin);
                    return false;
                };
                MarsIframe.IsServiceDomainValid = function (serviceDomain) {
                    serviceDomain = serviceDomain.trim().toLowerCase();
                    if (MarsIframe.AllowedServiceDomain && MarsIframe.AllowedServiceDomain.length > 0) {
                        for (var i = 0; i < MarsIframe.AllowedServiceDomain.length; i++) {
                            var allowedServiceDomain = MarsIframe.AllowedServiceDomain[i].trim().toLowerCase();
                            if ((serviceDomain == allowedServiceDomain)) {
                                return true;
                            }
                        }
                    }
                    console.log("Request to Invalid Service domain: " + serviceDomain);
                    return false;
                }
                /* tslint:disable */
                MarsIframe.extractDomain = function (url) {
                    var domain;
                    //find & remove protocol (http, ftp, etc.) and get domain
                    if (url.indexOf("://") > -1) {
                        domain = url.split('/')[2];
                    }
                    else {
                        domain = url.split('/')[0];
                    }
                    //find & remove port number
                    domain = domain.split(':')[0];
                    return domain;
                };
                /* tslint:enable */
                /* Generate random string*/
                MarsIframe.getRandomString = function () {
                    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
                };
                /* Generate new GUID*/
                MarsIframe.getnewGuid = function () {
                    //RFC 4122 canonical representation Version-4 xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx where x is any hexadecimal digit and y is one of 8, 9, A, or B
                    var guidPattern = "xx-x-4m-ym-xxx";
                    var newGuid = "";
                    for (var i = 0; i < guidPattern.length; i++) {
                        var randomString = Math.floor(Math.random() * Date.now());
                        switch (guidPattern[i]) {
                            case "x":
                                newGuid += randomString.toString(16).substring(0, 4);
                                break;
                            case "m":
                                newGuid += randomString.toString(16).substring(0, 3);
                                break;
                            case "y":
                                newGuid += (randomString & 0x3 | 0x8).toString(16);
                                break;
                            default: newGuid += guidPattern[i];
                        }
                    }
                    return newGuid;
                };
                MarsIframe.prototype.assignDomainWhiteList = function (domainWhiteList) {
                    if (domainWhiteList) {
                        MarsIframe.domainWhiteList = domainWhiteList.split(",");
                    }
                };

                /*Initilize Post Message Event Listener*/
                MarsIframe.prototype.registerListener = function () {
                    var self = this;
                    /*receive Post Message call*/
                    function receivePostMessage(event) {
                        MarsIframe.Event = event;
                        MarsIframe.eventObject = event;
                        var eventOrigin = event.origin || event.originalEvent.origin;
                        if (MarsIframe.IsDomainAvailable(eventOrigin)) {
                            if (event.data && event.data.requestType == MarsIframe.POSTUTIL) {
                                var marsIframeInstance = MarsIframe.getInstance();
                                marsIframeInstance.eventobjectMap[event.data.requestId] = event;
                                var promise = marsIframeInstance.postutil(event);
                            }
                            else if (event.data && event.data.requestType == MarsIframe.ISAUTHENTICATED) {
                                var marsIframeInstance = MarsIframe.getInstance();
                                marsIframeInstance.IsAuthenticated(event);
                            }
                            else {
                                console.log("Invalid requestType: " + event.data.requestType);
                            }
                        }
                        else {
                            console.log("Request from Invalid domain: " + event.origin);
                            return;
                        }
                    }
                    window.addEventListener("message", receivePostMessage, false);
                };

                MarsIframe.prototype.clearAuthCompletedCookie = function () {
                    document.cookie = "authCompleted=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
                }

                MarsIframe.prototype.postutil = function (event) {
                    var self = this;
                    var postutilobject = MarsIframe.getInstance().postutilServicecall(event);
                    postutilobject.done(function (data) {
                        if (data != null) {
                            var requestId = data.RequestId;
                            if (requestId == undefined && data.NextPageLink) {
                                requestId = data.NextPageLink.split('&').pop().split('=').pop();
                            }
                            var eventObject = self.eventobjectMap[requestId];
                            var requestType = eventObject.data.requestType;
                            var jsonobj = {
                                "requestId": requestId,
                                "requestType": requestType,
                                "responseData": data,
                            };
                            //Send the Response of the Servicecall to CRMDomain 
                            self.SendPostMessage(eventObject, jsonobj);
                            delete self.eventobjectMap[requestId];
                        }
                        else {
                            console.log("postutilServicecall returned null data.");
                        }
                    });
                    postutilobject.fail(function (message) {
                        console.log("postutilServicecall failed." + message);
                        var eventObject = self.eventobjectMap[event.data.requestId];
                        var requestType = eventObject.data.requestType;
                        var jsonobj = {
                            "requestId": event.data.requestId,
                            "requestType": requestType,
                            "responseData": message,
                        };

                        self.SendPostMessage(eventObject, jsonobj);
                        delete self.eventobjectMap[event.data.requestId];
                    });
                };
                MarsIframe.prototype.postutilServicecall = function (event) {
                    var self = this;
                    var allowUnauthorize = event.data.requestData.allowUnAuthorize;
                    if (allowUnauthorize) {
                        return self.CallServiceAPI(event, "");
                    }
                    else {
                        var postUtilPromise = jQuery.Deferred();
                        var tokenPromise = MarsIframe.getInstance().getMarsToken(event);
                        tokenPromise.done(function (marsAuthToken) {
                            var callServicePromise = self.CallServiceAPI(event, marsAuthToken);
                            callServicePromise.done(function (data) {
                                postUtilPromise.resolve(data);
                            });
                            callServicePromise.fail(function (data) {
                                postUtilPromise.reject(data);
                            });
                        });
                        tokenPromise.fail(function (data) {
                            postUtilPromise.reject("")
                        });

                        return postUtilPromise;
                    }
                };

                MarsIframe.prototype.ConvertToFileData = function (fileDataArray, fileName) {
                    var fileData = new FormData();
                    fileData.append("uploadedfile", MarsIframe.getInstance().dataURItoBlob(fileDataArray), fileName);
                    return fileData;
                };

                MarsIframe.prototype.dataURItoBlob = function (dataURI) {
                    // convert base64/URLEncoded data component to raw binary data held in a string
                    var byteString;
                    if (dataURI.split(',')[0].indexOf('base64') >= 0)
                        byteString = atob(dataURI.split(',')[1]);
                    else
                        byteString = unescape(dataURI.split(',')[1]);

                    // separate out the mime component
                    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

                    // write the bytes of the string to a typed array
                    var ia = new Uint8Array(byteString.length);
                    for (var i = 0; i < byteString.length; i++) {
                        ia[i] = byteString.charCodeAt(i);
                    }

                    return new Blob([ia], { type: mimeString });
                }

                MarsIframe.prototype.CallServiceAPI = function (event, marsAuthToken) {
                    var self = this;
                    var requestData = event.data.requestData;
                    var url = requestData.url;
                    var value = requestData.value;
                    var isAsync = requestData.isAsync;
                    var callType = requestData.callType;
                    var exportedFileName = requestData.exportedFileName;
                    if (callType == "search" || url.indexOf("ImportControl?") > 0 || url.indexOf("GetDynamicContexts?") > 0 || url.indexOf("WriteCloudFile?") > 0) {
                        url += "&requestId=" + event.data.requestId;
                    }
                    var fileName = "";

                    var fileDataArray = requestData.fileData
                    var fileData;
                    if (fileDataArray) {
                        if (url.indexOf("ImportControl?") > 0)
                            fileName = JSON.parse(value).Request
                        else
                            fileName = JSON.parse(value).Request.fileName
                        fileData = this.ConvertToFileData(fileDataArray, fileName);
                    }

                    var promise = $.Deferred();
                    var serviceDomain = MarsIframe.extractDomain(url);
                    if (!MarsIframe.IsServiceDomainValid(serviceDomain)) {
                        promise.reject();
                        return promise;
                    }
                    var headers = self.getProxyHeader(marsAuthToken);
                    if (fileData != null) {
                        //For importing XLIFF
                        fileData.append("Control", value);
                        promise = jQuery.ajax({
                            url: url,
                            type: 'POST',
                            dataType: 'json',
                            data: fileData,
                            contentType: false,
                            processData: false,
                            beforeSend: function (request) {
                                self.setRequestHeader(request, marsAuthToken, headers.RequestId);
                            },
                            header: headers,
                        });
                    }
                    else {
                        if (callType != "export") {
                            promise = jQuery.ajax({
                                url: url,
                                type: 'POST',
                                dataType: "json",
                                data: value,
                                contentType: "application/json;charset=utf-8",
                                isAsync: isAsync,
                                beforeSend: function (request) {
                                    self.setRequestHeader(request, marsAuthToken, headers.RequestId);
                                },
                                header: headers,
                            });
                        }
                        else {
                            var oReq = new XMLHttpRequest();
                            oReq.open("post", url, true);
                            oReq.responseType = "blob";
                            oReq.setRequestHeader("Content-type", "application/json");
                            oReq.setRequestHeader("X-CRM-MARS-LA", AuthManager.configs[MarsIframe.EnvType].loginAuthority);
                            oReq.setRequestHeader("Authorization", MarsIframe.BEARER + marsAuthToken);
                            oReq.setRequestHeader("X-CRM-MARS-GAT", MarsIframe.BEARER + sessionStorage["adal.access.token.key" + MarsIframe.GraphUrl]);
                            oReq.onreadystatechange = function (oEvent) {
                                if (oReq.readyState == 4 && oReq.status == 200) {
                                    var blob = oReq.response;
                                    var imgSrc = URL.createObjectURL(blob);
                                    if (typeof window.navigator.msSaveBlob !== 'undefined') {
                                        window.navigator.msSaveBlob(blob, exportedFileName);
                                    } else {
                                        var a = document.createElement("a");
                                        if (typeof a.getAttribute('download') === 'undefined') {
                                            $mars.window.location = imgSrc;
                                        } else {
                                            a.href = imgSrc;
                                            a.setAttribute('download', exportedFileName);
                                            document.body.appendChild(a);
                                            a.click();
                                            setTimeout(function () { jQuery('a[href="' + imgSrc + '"]').remove(); }, 2000);

                                        }
                                    }
                                    promise.resolve();
                                }
                                else if (oReq.status == 400) {
                                    promise.reject();
                                }
                            };
                            oReq.send(value);
                        }
                    }
                    return promise;
                };
                MarsIframe.prototype.getMarsToken = function (event) {
                    var requestData = event.data.requestData;
                    var requestId = event.data.requestId;
                    // If allowUnAuthorize is true, then skip authentication
                    if (requestData.allowUnAuthorize)
                        return '';
                    else {
                        var deferred = jQuery.Deferred();
                        this.authrequestMap[requestId] = deferred;
                        MarsIframe.getInstance().getMarsTokenUtil(event);
                        return deferred;
                    }
                };
                MarsIframe.prototype.getMarsTokenUtil = function (event) {
                    var self = this;
                    var requestId = event.data.requestId;
                    var deferred = this.getMarsTokenfromAdal(event, MarsIframe.resourceURL);
                    deferred.done(function (requestId) {
                        var deferredGraph = self.getMarsTokenfromAdal(event, MarsIframe.GraphUrl);
                        deferredGraph.done(function () {
                        var localrequestId = requestId;
                        var authToken = self.getTokenFromMemory();
                        self.authrequestMap[localrequestId].resolve(authToken);
                        delete self.authrequestMap[localrequestId];
                        });
                    });
                };
                MarsIframe.prototype.WhoAmI = function (event, clientUrl) {
                    var self = this;
                    var whoAmIDeferred = jQuery.Deferred();
                    MarsIframe.resourceURL = clientUrl;

                    var isAuthenticating = sessionStorage.getItem('isCRMAuthenticating');
                    if (isAuthenticating != 'true') {
                        sessionStorage.setItem('isCRMAuthenticating', 'true');
                        var deferred = this.getMarsTokenfromAdal(event, MarsIframe.resourceURL);

                        deferred.done(function (requestId) {
                            var localrequestId = requestId;
                            var authToken = self.getTokenFromMemory();
                            var response;
                            var request = new XMLHttpRequest();
                            request.open('GET', MarsIframe.resourceURL + MarsIframe.apiDataVersion + "WhoAmI", false);  // `false` makes the request synchronous
                            request.setRequestHeader("Authorization", MarsIframe.BEARER + authToken);
                            request.send(null);
                            if (request.status == 200) {
                                try {
                                    response = jQuery.parseJSON(request.responseText);
                                    MarsIframe.OrganizationId = response.OrganizationId;
                                    MarsIframe.UserId = response.UserId;
                                    sessionStorage.setItem('isCRMAuthenticating', '');
                                    whoAmIDeferred.resolve();
                                }
                                catch (ex) {
                                    MarsIframe.OrganizationId = "";
                                    MarsIframe.UserId = "";
                                    whoAmIDeferred.reject();
                                    throw new Error("Error: Getting org details failed...!");
                                }
                                return;
                            }
                            else {
                                MarsIframe.OrganizationId = "";
                                MarsIframe.UserId = "";
                                whoAmIDeferred.reject();
                                throw new Error("Error: Getting org details failed...!");
                            }
                        });
                    }


                    return whoAmIDeferred;
                };
                MarsIframe.prototype.getMarsTokenfromAdal = function (event, ResourceUrl) {
                    var self = this;
                    var requestId = event.data.requestId;
                    var deferred = jQuery.Deferred(function () {
                        AuthManager.getInstance(MarsIframe.EnvType, MarsIframe.ClientType, "LearningPath-Auth")
                            .iframeLogin
                            .catch(function (url) {
                                // When silent auth fails and user clicks login, open the
                                // sign in page in a new tab
                                if (!window.winref || window.winref.closed)
                                    window.winref = window.open(url, 'learningpath_login_window');

                                document.cookie = "authCompleted=;expires=Thu, 01 Jan 1970 00:00:00 GMT";

                                // Keep listening for the authCompleted cookie. That let's
                                // this page know that the user has logged in to Azure AD.
                                // Then we can simply reload the page and let the silent
                                // hidden iframe auth flow occur.
                                var interval = window.setInterval(function () {
                                    if (document.cookie.indexOf("authCompleted=true") < 0)
                                        return;
                                    if (window.winref && !window.winref.closed)
                                        return;

                                    document.cookie = "authCompleted=;expires=Thu, 01 Jan 1970 00:00:00 GMT";

                                    this.clearInterval(interval);
                                    // Reload the page and attempt silent auth
                                    window.location.reload();
                                }, 200);
                            });

                        // Request a token for a resource
                        AuthManager.getInstance(MarsIframe.EnvType, MarsIframe.ClientType, "LearningPath-Auth")
                            .getTokenForResource(ResourceUrl)
                            .done(function (token) {
                                deferred.resolve(requestId);
                            });

                    });

                    return deferred;
                };
                MarsIframe.prototype.getProxyHeader = function (marsAuthToken) {
                    var requestId = MarsIframe.getnewGuid();
                    var headers = { "RequestId": requestId };
                    if (marsAuthToken) {
                        headers = jQuery.extend(headers, { "Authorization": MarsIframe.BEARER + marsAuthToken });
                    }
                    return headers;
                };
                MarsIframe.prototype.setRequestHeader = function (request, marsAuthToken, requestId, includeRequestId) {
                    if (includeRequestId === void 0) { includeRequestId = true; }
                    request.setRequestHeader("X-CRM-MARS-LA", AuthManager.configs[MarsIframe.EnvType].loginAuthority);
                    request.setRequestHeader("X-CRM-MARS-GAT", MarsIframe.BEARER + sessionStorage["adal.access.token.key" + MarsIframe.GraphUrl]);
                    if (marsAuthToken) {
                        request.setRequestHeader("Authorization", MarsIframe.BEARER + marsAuthToken);
                    }
                    if (includeRequestId) {
                        request.setRequestHeader("RequestId", requestId);
                    }
                };

                MarsIframe.prototype.IsAuthenticated = function (event) {
                    var self = this;
                    var userId = event.data.requestData.UserId.toLowerCase()
                    if (userId.lastIndexOf("{") === 0) {
                        userId = userId.substr(1, event.data.requestData.UserId.length - 2);
                    }
                    var orgId = event.data.requestData.OrgId.toLowerCase();
                    if (orgId.lastIndexOf("{") === 0) {
                        orgId = orgId.substr(1, event.data.requestData.OrgId.length - 2);
                    }

                    var clientUrl = event.data.requestData.clientUrl.toLowerCase();

                    //Ignoring HTTP urls as client url is HTTP while iFrame is always HTTPS. Cannot make an HTTP call from HTTPS iFrame.
                    if (clientUrl.startsWith("https") && MarsIframe.ClientType !== "moca") {
                        if (MarsIframe.OrganizationId == "" || MarsIframe.UserId == "") {
                            var whoAmIPromise = MarsIframe.getInstance().WhoAmI(event, clientUrl);
                            whoAmIPromise.done(function () {

                                if ((userId != MarsIframe.UserId.toLowerCase() || orgId != MarsIframe.OrganizationId.toLowerCase()) && clientUrl.startsWith("https")) {
                                    var jsonobj = {
                                        requestId: MarsIframe.eventObject.data.requestId,
                                        requestType: MarsIframe.eventObject.data.requestType,
                                        responseData: false,
                                    };

                                    self.SendPostMessage(MarsIframe.eventObject, jsonobj);
                                }
                                else {
                                    MarsIframe.resourceURL = urlParams.resourceUrl;
                                    self.authenticateMarsUser(MarsIframe.eventObject)
                                }
                            });
                        }
                        else {
                            this.authenticateMarsUser(event);
                        }
                    }
                    else {
                        this.authenticateMarsUser(event);
                    }
                }

                MarsIframe.prototype.authenticateMarsUser = function (event) {
                    var self = this;
                    var isAuthTokenPresent = false;
                    if (MarsIframe.ClientType == "web") {
                        if (sessionStorage["adal.access.token.key" + MarsIframe.resourceURL] && sessionStorage.getItem('isAuthenticating') != "true") {
                            var authToken = this.getTokenFromMemory();
                            var tokenExpiry = sessionStorage.getItem("adal.expiration.key" + MarsIframe.resourceURL);
                            var now = Math.round(new Date().getTime() / 1000.0);
                            if (tokenExpiry > now) {
                                isAuthTokenPresent = true;
                            }
                        }
                    }
                    else if (MarsIframe.ClientType == "moca") {
                        if (document.cookie.indexOf("LearningPath-Auth") >= 0) {
                            isAuthTokenPresent = true;
                        }
                    }

                    var jsonobj = {
                        requestId: event.data.requestId,
                        requestType: event.data.requestType,
                        responseData: isAuthTokenPresent,
                    };

                    var isAuthenticating = sessionStorage.getItem('isAuthenticating');

                    if (!isAuthTokenPresent && isAuthenticating != 'true') {
                        sessionStorage.setItem('isAuthenticating', 'true');
                        var deferred = this.getMarsTokenfromAdal(event, MarsIframe.resourceURL);
                        this.authrequestMap[event.data.requestId] = deferred;
                        deferred.done(function (requestId) {
                            var deferredGraph = self.getMarsTokenfromAdal(event, MarsIframe.GraphUrl);
                            deferredGraph.done(function () {
                            var localrequestId = requestId;
                                sessionStorage.setItem('isAuthenticating', '');
                            var authToken = self.getTokenFromMemory();
                            self.authrequestMap[localrequestId].resolve(authToken);
                            delete self.authrequestMap[localrequestId];
                            });
                        });
                    }

                    this.SendPostMessage(event, jsonobj);
                };
                MarsIframe.prototype.getTokenFromMemory = function () {
                    var authToken = "";
                    if (MarsIframe.ClientType == "web") {
                        authToken = sessionStorage.getItem("adal.access.token.key" + MarsIframe.resourceURL);
                    }
                    else if (MarsIframe.ClientType == "moca") {
                        var allcookies = document.cookie;

                        // Get all the cookies pairs in an array
                        var cookiearray = allcookies.split(';');

                        // Now take key value pair out of this array
                        for (var i = 0; i < cookiearray.length; i++) {
                            if (cookiearray[i].split('=')[0].trim() == "LearningPath-Auth") {
                                authToken = cookiearray[i].split('=')[1];
                            }
                        }
                    }

                    return authToken;
                };
                MarsIframe.prototype.clearInterval = function (interval) {
                    window.clearInterval(interval);
                };
                MarsIframe.prototype.SendPostMessage = function (event, jsonData) {
                    if (navigator.userAgent.indexOf("Edge") > 0 || !!navigator.userAgent.match(/Trident.*rv[ :]?[1-9]{2}\./)) {
                        event.source.postMessage(JSON.parse(JSON.stringify(jsonData)), "*");
                    }
                    else {
                        var eventOrigin = event.origin || event.originalEvent.origin;
                        if (MarsIframe.IsDomainAvailable(eventOrigin)) {
                            event.source.postMessage(JSON.parse(JSON.stringify(jsonData)), event.origin);
                        }
                    }
                };
                MarsIframe.domainWhiteList = ['https://*.Crm.dynamics.com', 'https://*.Crm2.dynamics.com', 'https://*.Crm3.dynamics.com', 'https://*.Crm4.dynamics.com', 'https://*.Crm5.dynamics.com', 'https://*.Crm6.dynamics.com', 'https://*.Crm7.dynamics.com', 'https://*.Crm8.dynamics.com', 'https://*.Crm9.dynamics.com', 'https://*.Crm11.dynamics.com', 'https://*.crm.dynamics-int.com', 'https://*.crm.crmlivetie.com', 'https://*.crm2.crmlivetie.com'];
                MarsIframe.AllowedServiceDomain = ["marsv2tieprimarytm.marsdaily.trafficmanager.net", "marsv2intprimarytm.marsdaily.trafficmanager.net", "marsv2prodprimarytm.marsdaily.trafficmanager.net"];
                /* Singleton instance of Crossdomain*/
                MarsIframe._instance = null;
                MarsIframe.resourceURL = "";
                MarsIframe.ClientType = "";
                MarsIframe.EnvType = "";
                MarsIframe.POSTUTIL = "POSTUTIL";
                MarsIframe.ISAUTHENTICATED = "ISAUTHENTICATED";
                MarsIframe.BEARER = "Bearer "; //need whitespace at end
                MarsIframe.Event = null;
                MarsIframe.IsAuthenticated = false;
                MarsIframe.apiDataVersion = "/api/data/V8.0/";
                MarsIframe.OrganizationId = "";
                MarsIframe.UserId = "";
                MarsIframe.GraphUrl = "";
                return MarsIframe;
            })();
            Authentication.MarsIframe = MarsIframe;
        })(Authentication = Client.Authentication || (Client.Authentication = {}));
    })(Client = _MicrosoftMars.Client || (_MicrosoftMars.Client = {}));
})(_MicrosoftMars || (_MicrosoftMars = {}), jQuery);

if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
        position = position || 0;
        return this.substr(position, searchString.length) === searchString;
    };
}

if (sessionStorage && sessionStorage.clear)
    sessionStorage.clear();
